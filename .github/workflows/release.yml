name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Pre-release validation
  pre-release:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ubuntu-cargo-release-validation-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests with all features
      run: cargo test --all-features --verbose

    - name: Run clippy
      run: cargo clippy --all-features -- -D warnings

    - name: Verify crate can be packaged
      run: cargo publish --dry-run

    - name: Install cargo-audit
      run: cargo install cargo-audit --locked

    - name: Run security audit
      run: cargo audit

  # Build CLI binaries for multiple platforms
  build-binaries:
    name: Build CLI Binaries
    runs-on: ${{ matrix.os }}
    needs: pre-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: claude-sdk-rs-linux-x64
            features: cli
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: claude-sdk-rs-windows-x64.exe
            features: cli
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: claude-sdk-rs-macos-x64
            features: cli
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: claude-sdk-rs-macos-arm64
            features: cli
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ matrix.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }} --bin claude-sdk-rs

    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/claude-sdk-rs ${{ matrix.artifact }}
        chmod +x ${{ matrix.artifact }}

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\claude-sdk-rs.exe ${{ matrix.artifact }}

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}
        retention-days: 30

  # Create GitHub release with binaries
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release, build-binaries]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Display artifact structure
      run: ls -la artifacts/

    - name: Create release changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract latest version changelog
          awk '/^##[[:space:]]*\[?[0-9]/{if(NR>1)exit} /^##[[:space:]]*\[?[0-9]/{flag=1} flag' CHANGELOG.md > release_notes.md
        else
          echo "Release ${{ github.event.release.tag_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "## Features" >> release_notes.md
          echo "- Rust SDK for Claude AI with CLI integration" >> release_notes.md
          echo "- Type-safe async API" >> release_notes.md
          echo "- Feature flags for modular usage" >> release_notes.md
          echo "- Cross-platform CLI binaries" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo 'cargo install claude-sdk-rs --features cli' >> release_notes.md
          echo '```' >> release_notes.md
        fi

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.event.release.tag_name, 'alpha') || contains(github.event.release.tag_name, 'beta') || contains(github.event.release.tag_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io
  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [pre-release]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ubuntu-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish --token $CARGO_REGISTRY_TOKEN

  # Deploy documentation
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [pre-release]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ubuntu-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate documentation
      run: |
        cargo doc --all-features --no-deps
        echo '<meta http-equiv="refresh" content="0; url=claude_sdk_rs">' > target/doc/index.html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        cname: claude-sdk-rs-docs.github.io  # Replace with actual domain if available